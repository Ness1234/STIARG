
==================== FINAL INTERFACE ====================
2017-01-13 09:07:17.801474 UTC

interface HSMateLight-0.1.0.0-Df1CB9554xjHvhQtZIZ9Dm:Network.MateLight.ListFrame 8001
  interface hash: 104dff75482699258a621cffe478f75d
  ABI hash: cd9ed73720dfeb5376ef6423cd1f56a9
  export-list hash: 513412fb0e854402ebfffec351c2e6cf
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 982ecce3eb709ef071763836996e0f04
  sig of: Nothing
  used TH splices: False
  where
exports:
  Network.MateLight.ListFrame.renderPixel
  Network.MateLight.ListFrame.ListFrame{Network.MateLight.ListFrame.ListFrame}
  Network.MateLight.ListFrame.Pixel{Network.MateLight.ListFrame.Pixel pixB pixG pixR}
module dependencies: Network.MateLight Network.MateLight.Debug
package dependencies: appar-0.1.4@appar-0.1.4-1in4Ewd8JBkAYDZSWXLSe0
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      byteorder-1.0.4@byteorder-1.0.4-BbL4c17EpZrL9PcZm0xys9
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      iproute-1.7.1@iproute-1.7.1-EsJa15Wmnfj5pBTvNuT9V3
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-nK9qnsiJR03CWuPIGMmX
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         network-2.6.3.1@network-2.6.3.1-nK9qnsiJR03CWuPIGMmX:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         iproute-1.7.1@iproute-1.7.1-EsJa15Wmnfj5pBTvNuT9V3:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-EsJa15Wmnfj5pBTvNuT9V3:Data.IP.Range
import  -/  Network.MateLight 9a366672dd83766dca66a67b37f0eab9
  exports: c8b94c94fd318946c464ca72949626ac
  Frame 6621d4895ac382459e9f45a9432ee27c
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.Word cf9c7419e077bbdd2be059981bfe778f
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Read 4c41c56299e3935fa784002a9231b325
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 452408038bf4813973bc0de3c5248cff
import  -/  base-4.9.0.0:Text.Read.Lex 70e7158fbfbfbfe23ec26422fecddba8
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder ac62d05cb249f94dfc26745f9f18effa
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder.Internal e9011a4da5db9265472e23713c484389
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Builder bfaedb9a3bd59f66acde16e7b6278b30
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Short 19f0bb6b896fbf1d04edff8bba30d77e
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Short.Internal ee741c15060ba847f9f6108f8926b231
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
d32baa61b737b107a552f8fea4a93c1a
  $fEqListFrame ::
    GHC.Classes.Eq Network.MateLight.ListFrame.ListFrame
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.ListFrame
                  Network.MateLight.ListFrame.$fEqListFrame_$c==
                  Network.MateLight.ListFrame.$fEqListFrame_$c/= -}
c7ff1d521940f3eca8c875c0f63bbd41
  $fEqListFrame1 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ [Network.MateLight.ListFrame.Pixel]
                   Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[]) -}
d32baa61b737b107a552f8fea4a93c1a
  $fEqListFrame_$c/= ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[]_$c/=
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Bool>_R) -}
d32baa61b737b107a552f8fea4a93c1a
  $fEqListFrame_$c== ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fEqListFrame1
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Bool>_R) -}
936c3817a61685829af1dfbcdd144d2f
  $fEqListFrame_$dEq ::
    GHC.Classes.Eq Network.MateLight.ListFrame.Pixel
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fEqPixel -}
cf1c493129fbfa50437de06e57ddebca
  $fEqListFrame_$s$fEq[] ::
    GHC.Classes.Eq [Network.MateLight.ListFrame.Pixel]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Network.MateLight.ListFrame.Pixel]
                  (GHC.Classes.$fEq[]_$c==
                     @ Network.MateLight.ListFrame.Pixel
                     Network.MateLight.ListFrame.$fEqListFrame_$dEq)
                  Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[]_$c/=1 -}
478c3423e7ca4ab822e21479ed13f6df
  $fEqListFrame_$s$fEq[]_$c/= ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ [Network.MateLight.ListFrame.Pixel]
                      Network.MateLight.ListFrame.$fEqListFrame_$s$fOrd[]_$cp1Ord
                      x
                      y)) -}
201779f1a7c947a25070b1954871cd25
  $fEqListFrame_$s$fEq[]_$c/=1 ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ Network.MateLight.ListFrame.Pixel
                      Network.MateLight.ListFrame.$fEqListFrame_$dEq
                      x
                      y)) -}
f46c3fa0cb2af5891eeef0f6d0d24316
  $fEqListFrame_$s$fOrd[]_$cp1Ord ::
    GHC.Classes.Eq [Network.MateLight.ListFrame.Pixel]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[] -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fEqPixel :: GHC.Classes.Eq Network.MateLight.ListFrame.Pixel
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.Pixel
                  Network.MateLight.ListFrame.$fEqPixel_$c==
                  Network.MateLight.ListFrame.$fEqPixel_$c/= -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fEqPixel_$c/= ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Network.MateLight.ListFrame.Pixel)
                   (b :: Network.MateLight.ListFrame.Pixel) ->
                 case Network.MateLight.ListFrame.$fEqPixel_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fEqPixel_$c== ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: Network.MateLight.ListFrame.Pixel) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Word.W8# ww5 ->
                 case w1 of ww6 { Network.MateLight.ListFrame.Pixel ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Word.W8# ww11 ->
                 Network.MateLight.ListFrame.$w$c==
                   ww5
                   ww2
                   ww3
                   ww11
                   ww8
                   ww9 } } } }) -}
d32baa61b737b107a552f8fea4a93c1a
  $fFrameListFrame ::
    Network.MateLight.Frame Network.MateLight.ListFrame.ListFrame
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.ListFrame
                  Network.MateLight.ListFrame.$fFrameListFrame_$ctheData
                  Network.MateLight.ListFrame.$fFrameListFrame_$cdimension -}
d32baa61b737b107a552f8fea4a93c1a
  $fFrameListFrame_$cdimension ::
    Network.MateLight.ListFrame.ListFrame
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, Strictness: <L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Network.MateLight.ListFrame.ListFrame) ->
                 case Network.MateLight.ListFrame.$w$cdimension
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
d32baa61b737b107a552f8fea4a93c1a
  $fFrameListFrame_$ctheData ::
    Network.MateLight.ListFrame.ListFrame
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (ds :: Network.MateLight.ListFrame.ListFrame) ->
                 Data.ByteString.Builder.toLazyByteString
                   (Network.MateLight.ListFrame.$fFrameListFrame_go
                      ds `cast` (Network.MateLight.ListFrame.N:ListFrame[0]))) -}
8e805486a7d8126654c00a616297617b
  $fFrameListFrame_go ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> Data.ByteString.Builder.Internal.Builder
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame ::
    GHC.Classes.Ord Network.MateLight.ListFrame.ListFrame
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.ListFrame
                  Network.MateLight.ListFrame.$fEqListFrame
                  Network.MateLight.ListFrame.$fOrdListFrame_$ccompare
                  Network.MateLight.ListFrame.$fOrdListFrame_$c<
                  Network.MateLight.ListFrame.$fOrdListFrame_$c<=
                  Network.MateLight.ListFrame.$fOrdListFrame_$c>
                  Network.MateLight.ListFrame.$fOrdListFrame_$c>=
                  Network.MateLight.ListFrame.$fOrdListFrame_$cmax
                  Network.MateLight.ListFrame.$fOrdListFrame_$cmin -}
80348a1d4c82b3c8bbcb9c10368d2ac8
  $fOrdListFrame1 ::
    GHC.Classes.Ord [Network.MateLight.ListFrame.Pixel]
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[] -}
56d3eaa8f3a251a8b33f9aa302ad3f62
  $fOrdListFrame2 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ [Network.MateLight.ListFrame.Pixel]
                   Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$c< ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<1
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Bool>_R) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$c<= ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<=1
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Bool>_R) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$c> ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>1
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Bool>_R) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$c>= ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>=1
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Bool>_R) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$ccompare ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame2
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R <GHC.Types.Ordering>_R) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$cmax ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmax1
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])) -}
d32baa61b737b107a552f8fea4a93c1a
  $fOrdListFrame_$cmin ::
    Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame
    -> Network.MateLight.ListFrame.ListFrame
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmin
                  `cast`
                (Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])
                 ->_R Sym (Network.MateLight.ListFrame.N:ListFrame[0])) -}
886066131ae5a9485d6492ecbdd2397b
  $fOrdListFrame_$s$fOrd[] ::
    GHC.Classes.Ord [Network.MateLight.ListFrame.Pixel]
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ [Network.MateLight.ListFrame.Pixel]
                  Network.MateLight.ListFrame.$fEqListFrame_$s$fOrd[]_$cp1Ord
                  (GHC.Classes.$fOrd[]_$ccompare
                     @ Network.MateLight.ListFrame.Pixel
                     Network.MateLight.ListFrame.$fOrdPixel)
                  Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<
                  Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<=
                  Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>
                  Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>=
                  Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmax
                  Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmin1 -}
942dfac156eeb98affe33c3801abeaa8
  $fOrdListFrame_$s$fOrd[]_$c< ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Network.MateLight.ListFrame.Pixel
                        Network.MateLight.ListFrame.$fOrdPixel
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
344e4c3644d4a546de6a3ae07297732e
  $fOrdListFrame_$s$fOrd[]_$c<1 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ [Network.MateLight.ListFrame.Pixel]
                        Network.MateLight.ListFrame.$fOrdListFrame1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
62d85594dbc060c03df6ab8c956390e6
  $fOrdListFrame_$s$fOrd[]_$c<= ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Network.MateLight.ListFrame.Pixel
                        Network.MateLight.ListFrame.$fOrdPixel
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
ca624fe49b189af4ecf8cac2993b7ca6
  $fOrdListFrame_$s$fOrd[]_$c<=1 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ [Network.MateLight.ListFrame.Pixel]
                        Network.MateLight.ListFrame.$fOrdListFrame1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
41f731ab627fa3d974ea7d6c476156bd
  $fOrdListFrame_$s$fOrd[]_$c> ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Network.MateLight.ListFrame.Pixel
                        Network.MateLight.ListFrame.$fOrdPixel
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
1dae9ed06eb240e6c5f6bcde0d599298
  $fOrdListFrame_$s$fOrd[]_$c>1 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ [Network.MateLight.ListFrame.Pixel]
                        Network.MateLight.ListFrame.$fOrdListFrame1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
5cbe2973e55421aee3c7d6d58bea220b
  $fOrdListFrame_$s$fOrd[]_$c>= ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Network.MateLight.ListFrame.Pixel
                        Network.MateLight.ListFrame.$fOrdPixel
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
d12ab7fcf865ef7a1a341689f3a67083
  $fOrdListFrame_$s$fOrd[]_$c>=1 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ [Network.MateLight.ListFrame.Pixel]
                        Network.MateLight.ListFrame.$fOrdListFrame1
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
fffa3ce03c1db230af6a90208b640a58
  $fOrdListFrame_$s$fOrd[]_$cmax ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Network.MateLight.ListFrame.Pixel
                        Network.MateLight.ListFrame.$fOrdPixel
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
1722eb58f1f16df81dd548ee97f419bd
  $fOrdListFrame_$s$fOrd[]_$cmax1 ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ [Network.MateLight.ListFrame.Pixel]
                        Network.MateLight.ListFrame.$fOrdListFrame1
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
93794519fd3fce35dfc84328b6be5ab8
  $fOrdListFrame_$s$fOrd[]_$cmin ::
    [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]]
    -> [[Network.MateLight.ListFrame.Pixel]]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [[Network.MateLight.ListFrame.Pixel]])
                   (y :: [[Network.MateLight.ListFrame.Pixel]]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ [Network.MateLight.ListFrame.Pixel]
                        Network.MateLight.ListFrame.$fOrdListFrame1
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
b326df2217cb951ace24877df4e98c0b
  $fOrdListFrame_$s$fOrd[]_$cmin1 ::
    [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel]
    -> [Network.MateLight.ListFrame.Pixel]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Network.MateLight.ListFrame.Pixel])
                   (y :: [Network.MateLight.ListFrame.Pixel]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Network.MateLight.ListFrame.Pixel
                        Network.MateLight.ListFrame.$fOrdPixel
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel :: GHC.Classes.Ord Network.MateLight.ListFrame.Pixel
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.Pixel
                  Network.MateLight.ListFrame.$fEqPixel
                  Network.MateLight.ListFrame.$fOrdPixel_$ccompare
                  Network.MateLight.ListFrame.$fOrdPixel_$c<
                  Network.MateLight.ListFrame.$fOrdPixel_$c<=
                  Network.MateLight.ListFrame.$fOrdPixel_$c>
                  Network.MateLight.ListFrame.$fOrdPixel_$c>=
                  Network.MateLight.ListFrame.$fOrdPixel_$cmax
                  Network.MateLight.ListFrame.$fOrdPixel_$cmin -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$c< ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: Network.MateLight.ListFrame.Pixel) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Word.W8# ww5 ->
                 case w1 of ww6 { Network.MateLight.ListFrame.Pixel ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Word.W8# ww11 ->
                 Network.MateLight.ListFrame.$w$c<
                   ww5
                   ww2
                   ww3
                   ww11
                   ww8
                   ww9 } } } }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$c<= ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: Network.MateLight.ListFrame.Pixel) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Word.W8# ww5 ->
                 case w1 of ww6 { Network.MateLight.ListFrame.Pixel ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Word.W8# ww11 ->
                 Network.MateLight.ListFrame.$w$c<=
                   ww5
                   ww2
                   ww3
                   ww11
                   ww8
                   ww9 } } } }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$c> ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: Network.MateLight.ListFrame.Pixel) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Word.W8# ww5 ->
                 case w1 of ww6 { Network.MateLight.ListFrame.Pixel ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Word.W8# ww11 ->
                 Network.MateLight.ListFrame.$w$c>
                   ww5
                   ww2
                   ww3
                   ww11
                   ww8
                   ww9 } } } }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$c>= ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: Network.MateLight.ListFrame.Pixel) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Word.W8# ww5 ->
                 case w1 of ww6 { Network.MateLight.ListFrame.Pixel ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Word.W8# ww11 ->
                 Network.MateLight.ListFrame.$w$c>=
                   ww5
                   ww2
                   ww3
                   ww11
                   ww8
                   ww9 } } } }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$ccompare ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))><S(S(S)LL),1*U(1*U(U),1*U(U),1*U(U))>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: Network.MateLight.ListFrame.Pixel) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Word.W8# ww5 ->
                 case w1 of ww6 { Network.MateLight.ListFrame.Pixel ww7 ww8 ww9 ->
                 case ww7 of ww10 { GHC.Word.W8# ww11 ->
                 Network.MateLight.ListFrame.$w$ccompare
                   ww5
                   ww2
                   ww3
                   ww11
                   ww8
                   ww9 } } } }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$cmax ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U(U))><S(S(S)LL),U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Network.MateLight.ListFrame.Pixel)
                   (y :: Network.MateLight.ListFrame.Pixel) ->
                 case Network.MateLight.ListFrame.$fOrdPixel_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fOrdPixel_$cmin ::
    Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel
    -> Network.MateLight.ListFrame.Pixel
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),U(U(U),U(U),U(U))><S(S(S)LL),U(U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Network.MateLight.ListFrame.Pixel)
                   (y :: Network.MateLight.ListFrame.Pixel) ->
                 case Network.MateLight.ListFrame.$fOrdPixel_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame ::
    GHC.Read.Read Network.MateLight.ListFrame.ListFrame
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.ListFrame
                  Network.MateLight.ListFrame.$fReadListFrame_$creadsPrec
                  Network.MateLight.ListFrame.$fReadListFrame_$creadList
                  Network.MateLight.ListFrame.$fReadListFrame_$creadPrec
                  Network.MateLight.ListFrame.$fReadListFrame_$creadListPrec -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Network.MateLight.ListFrame.ListFrame]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Network.MateLight.ListFrame.ListFrame]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Network.MateLight.ListFrame.ListFrame
                   Network.MateLight.ListFrame.$fReadListFrame2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Network.MateLight.ListFrame.ListFrame>_R))
                   @ b
                   eta1) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         Network.MateLight.ListFrame.ListFrame
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Network.MateLight.ListFrame.ListFrame
                   Network.MateLight.ListFrame.$fReadListFrame3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Network.MateLight.ListFrame.ListFrame>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Network.MateLight.ListFrame.ListFrame>_R)))) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Network.MateLight.ListFrame.ListFrame
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Network.MateLight.ListFrame.ListFrame
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Network.MateLight.ListFrame.$w$creadPrec ww1 @ b w1 }) -}
2396420aec1eb7d20bb520d016bcdaa4
  $fReadListFrame4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ListFrame"#) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadListFrame5 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Network.MateLight.ListFrame.Pixel]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Network.MateLight.ListFrame.Pixel]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ Network.MateLight.ListFrame.Pixel
                   Network.MateLight.ListFrame.$fReadListFrame6
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Network.MateLight.ListFrame.Pixel>_R))
                   @ b
                   eta1) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadListFrame6 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         Network.MateLight.ListFrame.Pixel
  {- Arity: 1,
     Unfolding: (GHC.Read.$fReadDouble10
                   @ Network.MateLight.ListFrame.Pixel
                   Network.MateLight.ListFrame.$fReadListFrame7
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Network.MateLight.ListFrame.Pixel>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Network.MateLight.ListFrame.Pixel>_R)))) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadListFrame7 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Network.MateLight.ListFrame.Pixel
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Network.MateLight.ListFrame.Pixel
                          -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Network.MateLight.ListFrame.$w$creadPrec1 ww1 @ b w1 }) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame8 ::
    Text.ParserCombinators.ReadP.P
      [Network.MateLight.ListFrame.ListFrame]
  {- Unfolding: (GHC.Read.$wlist
                   @ Network.MateLight.ListFrame.ListFrame
                   Network.MateLight.ListFrame.$fReadListFrame2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Network.MateLight.ListFrame.ListFrame>_R))
                   @ [Network.MateLight.ListFrame.ListFrame]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Network.MateLight.ListFrame.ListFrame])) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [Network.MateLight.ListFrame.ListFrame]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Network.MateLight.ListFrame.ListFrame]
                   Network.MateLight.ListFrame.$fReadListFrame8) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Network.MateLight.ListFrame.ListFrame]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fReadListFrame1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Network.MateLight.ListFrame.ListFrame]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Network.MateLight.ListFrame.ListFrame]>_R))) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      Network.MateLight.ListFrame.ListFrame
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fReadListFrame2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Network.MateLight.ListFrame.ListFrame>_R)) -}
d32baa61b737b107a552f8fea4a93c1a
  $fReadListFrame_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         Network.MateLight.ListFrame.ListFrame
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Network.MateLight.ListFrame.ListFrame
                   ((GHC.Read.$fReadDouble10
                       @ Network.MateLight.ListFrame.ListFrame
                       Network.MateLight.ListFrame.$fReadListFrame3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Network.MateLight.ListFrame.ListFrame>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Network.MateLight.ListFrame.ListFrame>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <Network.MateLight.ListFrame.ListFrame>_R)
                      @ Network.MateLight.ListFrame.ListFrame
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Network.MateLight.ListFrame.ListFrame))) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadPixel :: GHC.Read.Read Network.MateLight.ListFrame.Pixel
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.Pixel
                  Network.MateLight.ListFrame.$fReadPixel_$creadsPrec
                  Network.MateLight.ListFrame.$fReadPixel_$creadList
                  Network.MateLight.ListFrame.$fReadPixel_$creadPrec
                  Network.MateLight.ListFrame.$fReadPixel_$creadListPrec -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadPixel1 ::
    Text.ParserCombinators.ReadP.P [Network.MateLight.ListFrame.Pixel]
  {- Unfolding: (GHC.Read.$wlist
                   @ Network.MateLight.ListFrame.Pixel
                   Network.MateLight.ListFrame.$fReadListFrame6
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Network.MateLight.ListFrame.Pixel>_R))
                   @ [Network.MateLight.ListFrame.Pixel]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Network.MateLight.ListFrame.Pixel])) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadPixel_$creadList ::
    Text.ParserCombinators.ReadP.ReadS
      [Network.MateLight.ListFrame.Pixel]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Network.MateLight.ListFrame.Pixel]
                   Network.MateLight.ListFrame.$fReadPixel1) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadPixel_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Network.MateLight.ListFrame.Pixel]
  {- Arity: 2, Strictness: <L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fReadListFrame5
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Network.MateLight.ListFrame.Pixel]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Network.MateLight.ListFrame.Pixel]>_R))) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadPixel_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      Network.MateLight.ListFrame.Pixel
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.ListFrame.$fReadListFrame6
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Network.MateLight.ListFrame.Pixel>_R)) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fReadPixel_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         Network.MateLight.ListFrame.Pixel
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Network.MateLight.ListFrame.Pixel
                   ((GHC.Read.$fReadDouble10
                       @ Network.MateLight.ListFrame.Pixel
                       Network.MateLight.ListFrame.$fReadListFrame7
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Network.MateLight.ListFrame.Pixel>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Network.MateLight.ListFrame.Pixel>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <Network.MateLight.ListFrame.Pixel>_R)
                      @ Network.MateLight.ListFrame.Pixel
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Network.MateLight.ListFrame.Pixel))) -}
d32baa61b737b107a552f8fea4a93c1a
  $fShowListFrame ::
    GHC.Show.Show Network.MateLight.ListFrame.ListFrame
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.ListFrame
                  Network.MateLight.ListFrame.$fShowListFrame_$cshowsPrec
                  Network.MateLight.ListFrame.$fShowListFrame_$cshow
                  Network.MateLight.ListFrame.$fShowListFrame_$cshowList -}
d32baa61b737b107a552f8fea4a93c1a
  $fShowListFrame1 ::
    Network.MateLight.ListFrame.ListFrame -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Network.MateLight.ListFrame.ListFrame)
                   (w1 :: GHC.Base.String) ->
                 Network.MateLight.ListFrame.$w$cshowsPrec 0# w w1) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fShowListFrame2 ::
    Network.MateLight.ListFrame.Pixel -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Network.MateLight.ListFrame.Pixel)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Network.MateLight.ListFrame.Pixel ww1 ww2 ww3 ->
                 Network.MateLight.ListFrame.$w$cshowsPrec1 0# ww1 ww2 ww3 w1 }) -}
ccf3f912946db8731d06d6060fe154a3
  $fShowListFrame3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
7bd4e6a4028da56ab69e4ca0901dc8b6
  $fShowListFrame4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pixB = "#) -}
88697cb9c36d04ae6a25d5d0a988c312
  $fShowListFrame5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pixG = "#) -}
b9fd0295691ca0c01fe2d78db484bea0
  $fShowListFrame6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
6477f756a374406ec7b7bf4329623810
  $fShowListFrame7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "pixR = "#) -}
091e78f312cfd6499c25285e30843c2e
  $fShowListFrame8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Pixel {"#) -}
4f00fef3cfab17f612b7f9d6764e191b
  $fShowListFrame9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ListFrame "#) -}
d32baa61b737b107a552f8fea4a93c1a
  $fShowListFrame_$cshow ::
    Network.MateLight.ListFrame.ListFrame -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Network.MateLight.ListFrame.ListFrame) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Network.MateLight.ListFrame.$fShowListFrame9)
                   (GHC.Show.showList__
                      @ [Network.MateLight.ListFrame.Pixel]
                      Network.MateLight.ListFrame.$fShowListFrame_$cshowList1
                      x `cast` (Network.MateLight.ListFrame.N:ListFrame[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
d32baa61b737b107a552f8fea4a93c1a
  $fShowListFrame_$cshowList ::
    [Network.MateLight.ListFrame.ListFrame] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Network.MateLight.ListFrame.ListFrame
                   Network.MateLight.ListFrame.$fShowListFrame1) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fShowListFrame_$cshowList1 ::
    [Network.MateLight.ListFrame.Pixel] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Network.MateLight.ListFrame.Pixel
                   Network.MateLight.ListFrame.$fShowListFrame2) -}
d32baa61b737b107a552f8fea4a93c1a
  $fShowListFrame_$cshowsPrec ::
    GHC.Types.Int
    -> Network.MateLight.ListFrame.ListFrame -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Network.MateLight.ListFrame.ListFrame)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Network.MateLight.ListFrame.$w$cshowsPrec ww1 w1 w2 }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fShowPixel :: GHC.Show.Show Network.MateLight.ListFrame.Pixel
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Network.MateLight.ListFrame.Pixel
                  Network.MateLight.ListFrame.$fShowPixel_$cshowsPrec
                  Network.MateLight.ListFrame.$fShowPixel_$cshow
                  Network.MateLight.ListFrame.$fShowListFrame_$cshowList1 -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fShowPixel_$cshow ::
    Network.MateLight.ListFrame.Pixel -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Network.MateLight.ListFrame.Pixel) ->
                 Network.MateLight.ListFrame.$fShowPixel_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $fShowPixel_$cshowsPrec ::
    GHC.Types.Int
    -> Network.MateLight.ListFrame.Pixel -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Network.MateLight.ListFrame.Pixel)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Network.MateLight.ListFrame.Pixel ww3 ww4 ww5 ->
                 Network.MateLight.ListFrame.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   ww5
                   w2 } }) -}
35e183c279aa4ee7e38de9999fe0c907
  $tc'ListFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3927723187864987193##
                   6056385749664426201##
                   Network.MateLight.ListFrame.$trModule
                   Network.MateLight.ListFrame.$tc'ListFrame1) -}
b32aca0fe5d995f8a5beda04de35e495
  $tc'ListFrame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ListFrame"#) -}
a67a71d518b3d57e70952b0d1256f88f
  $tc'Pixel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2653620223632208247##
                   1861133468093940231##
                   Network.MateLight.ListFrame.$trModule
                   Network.MateLight.ListFrame.$tc'Pixel1) -}
82f44110db451e678eb2cf87df4d19d9
  $tc'Pixel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Pixel"#) -}
029c7582d13f8573487ff94509634c23
  $tcListFrame :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5156345051243517534##
                   10027648290787985838##
                   Network.MateLight.ListFrame.$trModule
                   Network.MateLight.ListFrame.$tcListFrame1) -}
c75f2e5f716aff463ec829ac7c2aa104
  $tcListFrame1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ListFrame"#) -}
3de618b59b08b26ea4d03d3a20caa9ca
  $tcPixel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11219190851353699293##
                   14534826232513575956##
                   Network.MateLight.ListFrame.$trModule
                   Network.MateLight.ListFrame.$tcPixel1) -}
243ff0a2673b52ea052b798f3fc8585a
  $tcPixel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Pixel"#) -}
7f5ac8c036ed8fefee93b410ad92e3b9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Network.MateLight.ListFrame.$trModule2
                   Network.MateLight.ListFrame.$trModule1) -}
04df85138814dc254c4460ca947903d3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Network.MateLight.ListFrame"#) -}
a345dcbb81d378b578049af7499fe20f
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HSMateLight-0.1.0.0-Df1CB9554xjHvhQtZIZ9Dm"#) -}
52870003c7ecbd5df7d7c234111af695
  $w$c< ::
    GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Word.Word8)
                   (ww5 :: GHC.Word.Word8) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww ww3) of wild2 {
                   GHC.Types.False
                   -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.leWord# ww ww3)
                   GHC.Types.True
                   -> case ww1 of wild { GHC.Word.W8# x ->
                      case ww4 of wild1 { GHC.Word.W8# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# x y) of wild4 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.leWord# x y)
                        GHC.Types.True -> GHC.Word.ltWord8 ww2 ww5 } } } }) -}
e59146a7ef950bdf5ce2ec3a51fdb522
  $w$c<= ::
    GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Word.Word8)
                   (ww5 :: GHC.Word.Word8) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww ww3) of wild2 {
                   GHC.Types.False
                   -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.leWord# ww ww3)
                   GHC.Types.True
                   -> case ww1 of wild { GHC.Word.W8# x ->
                      case ww4 of wild1 { GHC.Word.W8# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# x y) of wild4 {
                        GHC.Types.False
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.leWord# x y)
                        GHC.Types.True -> GHC.Word.leWord8 ww2 ww5 } } } }) -}
a7a089571e3862df278e6f06a2706e4d
  $w$c== ::
    GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Word.Word8)
                   (ww5 :: GHC.Word.Word8) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww ww3) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case ww1 of wild1 { GHC.Word.W8# x ->
                      case ww4 of wild2 { GHC.Word.W8# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> GHC.Word.eqWord8 ww2 ww5 } } } }) -}
7ffb29ec1606e76785510f5ba73dbfcb
  $w$c> ::
    GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Word.Word8)
                   (ww5 :: GHC.Word.Word8) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww ww3) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# ww ww3) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case ww1 of wild { GHC.Word.W8# x ->
                      case ww4 of wild1 { GHC.Word.W8# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# x y) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord# x y) of wild3 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        GHC.Types.True -> GHC.Word.gtWord8 ww2 ww5 } } } }) -}
8038e1c87fae462cdeaa4f6db27c0376
  $w$c>= ::
    GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Word.Word8)
                   (ww5 :: GHC.Word.Word8) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww ww3) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# ww ww3) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False }
                   GHC.Types.True
                   -> case ww1 of wild { GHC.Word.W8# x ->
                      case ww4 of wild1 { GHC.Word.W8# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# x y) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord# x y) of wild3 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        GHC.Types.True -> GHC.Word.geWord8 ww2 ww5 } } } }) -}
f37c42496a395d0df62d0015960fec44
  $w$ccompare ::
    GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Prim.Word#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Types.Ordering
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Word#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Prim.Word#)
                   (ww4 :: GHC.Word.Word8)
                   (ww5 :: GHC.Word.Word8) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.eqWord# ww ww3) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.leWord# ww ww3) of wild3 {
                        GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.LT }
                   GHC.Types.True
                   -> case ww1 of wild { GHC.Word.W8# x ->
                      case ww4 of wild1 { GHC.Word.W8# y ->
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# x y) of wild4 {
                        GHC.Types.False
                        -> case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.leWord# x y) of wild3 {
                             GHC.Types.False -> GHC.Types.GT GHC.Types.True -> GHC.Types.LT }
                        GHC.Types.True -> GHC.Word.$fOrdWord8_$ccompare ww2 ww5 } } } }) -}
d32baa61b737b107a552f8fea4a93c1a
  $w$cdimension ::
    Network.MateLight.ListFrame.ListFrame
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 1, Strictness: <L,U>, Inline: [0],
     Unfolding: (\ (w :: Network.MateLight.ListFrame.ListFrame) ->
                 (# case GHC.Base.map
                           @ [Network.MateLight.ListFrame.Pixel]
                           @ GHC.Types.Int
                           (GHC.List.length @ Network.MateLight.ListFrame.Pixel)
                           w `cast` (Network.MateLight.ListFrame.N:ListFrame[0]) of wild {
                      [] -> GHC.List.maximum2
                      : ipv ipv1
                      -> case ipv of ww { GHC.Types.I# ww1 ->
                         case GHC.List.$wgo ipv1 ww1 of ww2 { DEFAULT ->
                         GHC.Types.I# ww2 } } },
                    case GHC.List.$wlenAcc
                           @ [Network.MateLight.ListFrame.Pixel]
                           w `cast` (Network.MateLight.ListFrame.N:ListFrame[0])
                           0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 } #)) -}
d32baa61b737b107a552f8fea4a93c1a
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Network.MateLight.ListFrame.ListFrame
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   @ b
                   (w :: Network.MateLight.ListFrame.ListFrame
                         -> Text.ParserCombinators.ReadP.P b) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=# ww 10#) of wild2 {
                   GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                   GHC.Types.True
                   -> let {
                        lvl80 :: Text.ParserCombinators.ReadP.P b
                        = let {
                            lvl81 :: Text.ParserCombinators.ReadP.P b
                            = GHC.Read.$wlist
                                @ [Network.MateLight.ListFrame.Pixel]
                                Network.MateLight.ListFrame.$fReadListFrame5
                                  `cast`
                                (Trans
                                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                                    <[Network.MateLight.ListFrame.Pixel]>_R))
                                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                               <[Network.MateLight.ListFrame.Pixel]>_R)))
                                @ b
                                (\ (a1 :: [[Network.MateLight.ListFrame.Pixel]]) ->
                                 w a1 `cast` (Sym (Network.MateLight.ListFrame.N:ListFrame[0])))
                          } in
                          Text.Read.Lex.expect2
                            @ b
                            (\ (a1 :: Text.Read.Lex.Lexeme) ->
                             case a1 of wild {
                               DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                               Text.Read.Lex.Ident a2
                               -> case GHC.Base.eqString
                                         a2
                                         Network.MateLight.ListFrame.$fReadListFrame4 of wild1 {
                                    GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                    GHC.Types.True -> lvl81 } })
                      } in
                      let {
                        k :: () -> Text.ParserCombinators.ReadP.P b
                          {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                             Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                        = \ (w4 :: ()) -> lvl80
                      } in
                      Text.ParserCombinators.ReadP.Look
                        @ b
                        (\ (a :: GHC.Base.String) ->
                         (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                           `cast`
                         (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                           @ b
                           k) }) -}
4309ace6b7e3389b60cc41d1fc6dfd98
  $w$creadPrec1 ::
    GHC.Prim.Int#
    -> forall b.
       (Network.MateLight.ListFrame.Pixel
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
d32baa61b737b107a552f8fea4a93c1a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Network.MateLight.ListFrame.ListFrame
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Network.MateLight.ListFrame.ListFrame)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Network.MateLight.ListFrame.$fShowListFrame9
                        (GHC.Show.showList__
                           @ [Network.MateLight.ListFrame.Pixel]
                           Network.MateLight.ListFrame.$fShowListFrame_$cshowList1
                           w `cast` (Network.MateLight.ListFrame.N:ListFrame[0])
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Network.MateLight.ListFrame.$fShowListFrame9
                           (GHC.Show.showList__
                              @ [Network.MateLight.ListFrame.Pixel]
                              Network.MateLight.ListFrame.$fShowListFrame_$cshowList1
                              w `cast` (Network.MateLight.ListFrame.N:ListFrame[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w1))) }) -}
90f2c6bffa956c440376864f55c18be1
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Word.Word8
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5, Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Word.Word8)
                   (ww2 :: GHC.Word.Word8)
                   (ww3 :: GHC.Word.Word8)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Network.MateLight.ListFrame.$fShowListFrame8
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Network.MateLight.ListFrame.$fShowListFrame7
                          (case ww1 of wild { GHC.Word.W8# x# ->
                           let {
                             ww4 :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                           } in
                           let {
                             w1 :: GHC.Base.String
                             = GHC.Base.++
                                 @ GHC.Types.Char
                                 Network.MateLight.ListFrame.$fShowListFrame6
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    Network.MateLight.ListFrame.$fShowListFrame5
                                    (case ww2 of wild1 { GHC.Word.W8# x#1 ->
                                     let {
                                       ww5 :: GHC.Prim.Int# = GHC.Prim.word2Int# x#1
                                     } in
                                     let {
                                       w2 :: GHC.Base.String
                                       = GHC.Base.++
                                           @ GHC.Types.Char
                                           Network.MateLight.ListFrame.$fShowListFrame6
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              Network.MateLight.ListFrame.$fShowListFrame4
                                              (case ww3 of wild2 { GHC.Word.W8# x#2 ->
                                               let {
                                                 ww6 :: GHC.Prim.Int# = GHC.Prim.word2Int# x#2
                                               } in
                                               case GHC.Prim.tagToEnum#
                                                      @ GHC.Types.Bool
                                                      (GHC.Prim.<# ww6 0#) of wild3 {
                                                 GHC.Types.False
                                                 -> case GHC.Show.$witos
                                                           ww6
                                                           (GHC.Base.++
                                                              @ GHC.Types.Char
                                                              Network.MateLight.ListFrame.$fShowListFrame3
                                                              x) of ww7 { (#,#) ww8 ww9 ->
                                                    GHC.Types.: @ GHC.Types.Char ww8 ww9 }
                                                 GHC.Types.True
                                                 -> case GHC.Show.$witos
                                                           ww6
                                                           (GHC.Base.++
                                                              @ GHC.Types.Char
                                                              Network.MateLight.ListFrame.$fShowListFrame3
                                                              x) of ww7 { (#,#) ww8 ww9 ->
                                                    GHC.Types.: @ GHC.Types.Char ww8 ww9 } } }))
                                     } in
                                     case GHC.Prim.tagToEnum#
                                            @ GHC.Types.Bool
                                            (GHC.Prim.<# ww5 0#) of wild2 {
                                       GHC.Types.False
                                       -> case GHC.Show.$witos ww5 w2 of ww6 { (#,#) ww7 ww8 ->
                                          GHC.Types.: @ GHC.Types.Char ww7 ww8 }
                                       GHC.Types.True
                                       -> case GHC.Show.$witos ww5 w2 of ww6 { (#,#) ww7 ww8 ->
                                          GHC.Types.: @ GHC.Types.Char ww7 ww8 } } }))
                           } in
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.<# ww4 0#) of wild1 {
                             GHC.Types.False
                             -> case GHC.Show.$witos ww4 w1 of ww5 { (#,#) ww6 ww7 ->
                                GHC.Types.: @ GHC.Types.Char ww6 ww7 }
                             GHC.Types.True
                             -> case GHC.Show.$witos ww4 w1 of ww5 { (#,#) ww6 ww7 ->
                                GHC.Types.: @ GHC.Types.Char ww6 ww7 } } }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 w)) }) -}
d32baa61b737b107a552f8fea4a93c1a
  newtype ListFrame = ListFrame [[Network.MateLight.ListFrame.Pixel]]
4309ace6b7e3389b60cc41d1fc6dfd98
  data Pixel
    = Pixel {pixR :: GHC.Word.Word8,
             pixG :: GHC.Word.Word8,
             pixB :: GHC.Word.Word8}
9fd8025d4404be77e0427fe879b9edc6
  pixB :: Network.MateLight.ListFrame.Pixel -> GHC.Word.Word8
  RecSel Left Network.MateLight.ListFrame.Pixel
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Network.MateLight.ListFrame.Pixel) ->
                 case ds of wild { Network.MateLight.ListFrame.Pixel ds1 ds2 ds3 ->
                 ds3 }) -}
5b0be9aed413346a845eb82b969d362f
  pixG :: Network.MateLight.ListFrame.Pixel -> GHC.Word.Word8
  RecSel Left Network.MateLight.ListFrame.Pixel
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Network.MateLight.ListFrame.Pixel) ->
                 case ds of wild { Network.MateLight.ListFrame.Pixel ds1 ds2 ds3 ->
                 ds2 }) -}
a0eef7aa26d7c75245ef1b7df8dc1796
  pixR :: Network.MateLight.ListFrame.Pixel -> GHC.Word.Word8
  RecSel Left Network.MateLight.ListFrame.Pixel
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Network.MateLight.ListFrame.Pixel) ->
                 case ds of wild { Network.MateLight.ListFrame.Pixel ds1 ds2 ds3 ->
                 ds1 }) -}
43d8088af57d75c9ede73203c78f1abc
  renderPixel ::
    Network.MateLight.ListFrame.Pixel -> [GHC.Word.Word8]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Network.MateLight.ListFrame.Pixel) ->
                 case ds of wild { Network.MateLight.ListFrame.Pixel a b c ->
                 GHC.Types.:
                   @ GHC.Word.Word8
                   a
                   (GHC.Types.:
                      @ GHC.Word.Word8
                      b
                      (GHC.Types.:
                         @ GHC.Word.Word8
                         c
                         (GHC.Types.[] @ GHC.Word.Word8))) }) -}
instance GHC.Classes.Eq [Network.MateLight.ListFrame.ListFrame]
  = Network.MateLight.ListFrame.$fEqListFrame
instance GHC.Classes.Eq [Network.MateLight.ListFrame.Pixel]
  = Network.MateLight.ListFrame.$fEqPixel
instance Network.MateLight.Frame [Network.MateLight.ListFrame.ListFrame]
  = Network.MateLight.ListFrame.$fFrameListFrame
instance GHC.Classes.Ord [Network.MateLight.ListFrame.ListFrame]
  = Network.MateLight.ListFrame.$fOrdListFrame
instance GHC.Classes.Ord [Network.MateLight.ListFrame.Pixel]
  = Network.MateLight.ListFrame.$fOrdPixel
instance GHC.Read.Read [Network.MateLight.ListFrame.ListFrame]
  = Network.MateLight.ListFrame.$fReadListFrame
instance GHC.Read.Read [Network.MateLight.ListFrame.Pixel]
  = Network.MateLight.ListFrame.$fReadPixel
instance GHC.Show.Show [Network.MateLight.ListFrame.ListFrame]
  = Network.MateLight.ListFrame.$fShowListFrame
instance GHC.Show.Show [Network.MateLight.ListFrame.Pixel]
  = Network.MateLight.ListFrame.$fShowPixel
"SPEC/Network.MateLight.ListFrame $fEq[] @ Pixel" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                             Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fEq[] @ Network.MateLight.ListFrame.Pixel $dEq
  = Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[]
"SPEC/Network.MateLight.ListFrame $fEq[]_$c/= @ Pixel" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                  Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fEq[]_$c/= @ Network.MateLight.ListFrame.Pixel $dEq
  = Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[]_$c/=1
"SPEC/Network.MateLight.ListFrame $fEq[]_$c/= @ [Pixel]" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                                    [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fEq[]_$c/= @ [Network.MateLight.ListFrame.Pixel] $dEq
  = Network.MateLight.ListFrame.$fEqListFrame_$s$fEq[]_$c/=
"SPEC/Network.MateLight.ListFrame $fOrd[] @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                               Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[] @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c< @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                   Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$c< @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c< @ [Pixel]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                     [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fOrd[]_$c< @ [Network.MateLight.ListFrame.Pixel] $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<1
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c<= @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                    Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$c<= @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<=
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c<= @ [Pixel]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                      [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fOrd[]_$c<= @ [Network.MateLight.ListFrame.Pixel]
                           $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c<=1
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c> @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                   Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$c> @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c> @ [Pixel]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                     [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fOrd[]_$c> @ [Network.MateLight.ListFrame.Pixel] $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>1
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c>= @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                    Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$c>= @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>=
"SPEC/Network.MateLight.ListFrame $fOrd[]_$c>= @ [Pixel]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                      [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fOrd[]_$c>= @ [Network.MateLight.ListFrame.Pixel]
                           $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$c>=1
"SPEC/Network.MateLight.ListFrame $fOrd[]_$cmax @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                     Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$cmax @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmax
"SPEC/Network.MateLight.ListFrame $fOrd[]_$cmax @ [Pixel]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                       [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fOrd[]_$cmax @ [Network.MateLight.ListFrame.Pixel]
                            $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmax1
"SPEC/Network.MateLight.ListFrame $fOrd[]_$cmin @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                     Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$cmin @ Network.MateLight.ListFrame.Pixel $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmin1
"SPEC/Network.MateLight.ListFrame $fOrd[]_$cmin @ [Pixel]" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                       [Network.MateLight.ListFrame.Pixel])
  GHC.Classes.$fOrd[]_$cmin @ [Network.MateLight.ListFrame.Pixel]
                            $dOrd
  = Network.MateLight.ListFrame.$fOrdListFrame_$s$fOrd[]_$cmin
"SPEC/Network.MateLight.ListFrame $fOrd[]_$cp1Ord @ Pixel" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                                       Network.MateLight.ListFrame.Pixel)
  GHC.Classes.$fOrd[]_$cp1Ord @ Network.MateLight.ListFrame.Pixel
                              $dOrd
  = Network.MateLight.ListFrame.$fEqListFrame_$s$fOrd[]_$cp1Ord
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

