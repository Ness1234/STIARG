
==================== FINAL INTERFACE ====================
2017-01-13 09:07:18.403878 UTC

interface HSMateLight-0.1.0.0-Df1CB9554xjHvhQtZIZ9Dm:Network.MateLight.Simple 8001
  interface hash: b437358d57c3a6450012120f900acf1a
  ABI hash: 81d7dcb13d042dc814b0b490d974bb2d
  export-list hash: 20d463d7851dd5ad9e022f2bb0b5ba95
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 982ecce3eb709ef071763836996e0f04
  sig of: Nothing
  used TH splices: False
  where
exports:
  Network.MateLight.parseAddress
  Network.MateLight.Simple.runMate
  Network.MateLight.Simple.runMateRandom
  Network.MateLight.Simple.stringEvent
  Network.MateLight.Config{Network.MateLight.Config cAddr cDimension cEventProviders cPort cStepTime cSynchronized}
  Network.MateLight.Frame{Network.MateLight.dimension Network.MateLight.theData}
  Network.MateLight.ListFrame.ListFrame{Network.MateLight.ListFrame.ListFrame}
  Network.MateLight.ListFrame.Pixel{Network.MateLight.ListFrame.Pixel pixB pixG pixR}
  Network.MateLight.Simple.Event{Network.MateLight.Simple.Event}
module dependencies: Network.MateLight Network.MateLight.Debug
                     Network.MateLight.ListFrame
package dependencies: Win32-2.3.1.1@Win32-2.3.1.1
                      appar-0.1.4@appar-0.1.4-1in4Ewd8JBkAYDZSWXLSe0
                      array-0.5.1.1@array-0.5.1.1 base-4.9.0.0
                      byteorder-1.0.4@byteorder-1.0.4-BbL4c17EpZrL9PcZm0xys9
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      iproute-1.7.1@iproute-1.7.1-EsJa15Wmnfj5pBTvNuT9V3
                      mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM
                      network-2.6.3.1@network-2.6.3.1-nK9qnsiJR03CWuPIGMmX
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         network-2.6.3.1@network-2.6.3.1-nK9qnsiJR03CWuPIGMmX:Network.Socket
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         iproute-1.7.1@iproute-1.7.1-EsJa15Wmnfj5pBTvNuT9V3:Data.IP.Addr
                         iproute-1.7.1@iproute-1.7.1-EsJa15Wmnfj5pBTvNuT9V3:Data.IP.Range
import  -/  Network.MateLight 9a366672dd83766dca66a67b37f0eab9
  exports: c8b94c94fd318946c464ca72949626ac
  Config 152bc5eb58d388ac7fd4981f352d551f
  Config d2c3b7afe99892caa860a9e89a707935
  EventT 138bad3b136e1f2eeb15d9ffae44eab1
  EventT 8638020a3d8046727f9d5490cccce8d9
  Frame 6621d4895ac382459e9f45a9432ee27c
  cAddr 2fdc5c2314ee7f5c488bd0fd6261dba4
  cDimension 448117794d96fcd0aae319037e23a687
  cEventProviders f5ade5bd3a05c0601236f9b5d323db70
  cPort f12cb8bda675e00f9d6778378332debe
  cStepTime 3f23665abb3cf09a256b200b2ebdbfc0
  cSynchronized 924882553bacd0b6a563912089a6b76e
  dimension 17ce30146b1e8d49d986bcae1dd29020
  parseAddress 1a72b5e8b2ee877deacd22d8d328e7ad
  runMateM 8624911527d7fdb8b6017120da2f723b
  theData fbcc8bfa7b1f31a1add4d4e59a52d22f
import  -/  Network.MateLight.ListFrame cd9ed73720dfeb5376ef6423cd1f56a9
  exports: 513412fb0e854402ebfffec351c2e6cf
  ListFrame e4cd7dcd132cb96ada6e0158d71f53e6
  ListFrame d32baa61b737b107a552f8fea4a93c1a
  Pixel 7eeccdcf9903c91b5f5d871a7e12b443
  Pixel 4309ace6b7e3389b60cc41d1fc6dfd98
  pixB 9fd8025d4404be77e0427fe879b9edc6
  pixG 5b0be9aed413346a845eb82b969d362f
  pixR a0eef7aa26d7c75245ef1b7df8dc1796
import  -/  base-4.9.0.0:Control.Monad.IO.Class 6093ce5ace985d5ea81901bb51e28805
import  -/  base-4.9.0.0:Data.Typeable 589d8ab7d073c81d7ef5f949fd3eb448
import  -/  base-4.9.0.0:Data.Typeable.Internal af418ce9ba51b5262399b6fc69c77235
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.Enum dab7089478c738f0ffbf72212d9113c9
import  -/  base-4.9.0.0:GHC.Read 4c41c56299e3935fa784002a9231b325
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:Text.ParserCombinators.ReadPrec 452408038bf4813973bc0de3c5248cff
import  -/  base-4.9.0.0:Text.Read.Lex 70e7158fbfbfbfe23ec26422fecddba8
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State d851912d62cbc95e043a9cc13c3581de
import  -/  mtl-2.2.1@mtl-2.2.1-6qsR1PHUy5lL47Hpoa4jCM:Control.Monad.State.Class 6b9267d06a66633777f53733046c8d46
import  -/  random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe:System.Random 8483439f8ec14d68196250b2c4a4fa4e
83a493b1c87ba6f69392617b69d5250e
  $fEqEvent ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Network.MateLight.Simple.Event a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (Network.MateLight.Simple.Event a)
                  (Network.MateLight.Simple.$fEqEvent_$c== @ a $dEq)
                  (Network.MateLight.Simple.$fEqEvent_$c/= @ a $dEq) -}
83a493b1c87ba6f69392617b69d5250e
  $fEqEvent_$c/= ::
    GHC.Classes.Eq a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$c/= @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fEqEvent_$c== ::
    GHC.Classes.Eq a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$c== @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Network.MateLight.Simple.Event a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dOrd :: GHC.Classes.Ord a).
                  @ (Network.MateLight.Simple.Event a)
                  (Network.MateLight.Simple.$fOrdEvent_$cp1Ord @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$ccompare @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$c< @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$c<= @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$c> @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$c>= @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$cmax @ a $dOrd)
                  (Network.MateLight.Simple.$fOrdEvent_$cmin @ a $dOrd) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$c< ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$c< @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$c<= ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$c<= @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$c> ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,1*C1(C1(U)),A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$c> @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$c>= ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(C1(U)),A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$c>= @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$ccompare ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 Network.MateLight.Simple.$w$ccompare @ a w ww1 ww2 ww4 ww5 } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$cmax ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww4 of wild {
                   GHC.Types.LT -> Network.MateLight.Simple.Event @ a ww4 ww5
                   GHC.Types.EQ
                   -> case GHC.Classes.<= @ a w ww2 ww5 of wild1 {
                        GHC.Types.False -> Network.MateLight.Simple.Event @ a ww1 ww2
                        GHC.Types.True -> Network.MateLight.Simple.Event @ a ww4 ww5 }
                   GHC.Types.GT
                   -> Network.MateLight.Simple.Event @ a ww1 ww2 } } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$cmin ::
    GHC.Classes.Ord a =>
    Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a
    -> Network.MateLight.Simple.Event a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w4 :: Network.MateLight.Simple.Event a)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 case w5 of ww3 { Network.MateLight.Simple.Event ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww4 of wild {
                   GHC.Types.LT -> Network.MateLight.Simple.Event @ a ww1 ww2
                   GHC.Types.EQ
                   -> case GHC.Classes.<= @ a w ww2 ww5 of wild1 {
                        GHC.Types.False -> Network.MateLight.Simple.Event @ a ww4 ww5
                        GHC.Types.True -> Network.MateLight.Simple.Event @ a ww1 ww2 }
                   GHC.Types.GT
                   -> Network.MateLight.Simple.Event @ a ww4 ww5 } } }) -}
83a493b1c87ba6f69392617b69d5250e
  $fOrdEvent_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Network.MateLight.Simple.Event a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Network.MateLight.Simple.$fEqEvent
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent ::
    GHC.Read.Read a => GHC.Read.Read (Network.MateLight.Simple.Event a)
  DFunId
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dRead :: GHC.Read.Read a).
                  @ (Network.MateLight.Simple.Event a)
                  (Network.MateLight.Simple.$fReadEvent_$creadsPrec @ a $dRead)
                  (Network.MateLight.Simple.$fReadEvent_$creadList @ a $dRead)
                  (Network.MateLight.Simple.$fReadEvent_$creadPrec @ a $dRead)
                  (Network.MateLight.Simple.$fReadEvent_$creadListPrec @ a $dRead) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent1 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Network.MateLight.Simple.Event a]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Network.MateLight.Simple.Event a]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.$wlist
                   @ (Network.MateLight.Simple.Event a)
                   (Network.MateLight.Simple.$fReadEvent2 @ a $dRead)
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Network.MateLight.Simple.Event a>_R))
                   @ b
                   eta1) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent2 ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP
         (Network.MateLight.Simple.Event a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 let {
                   ds :: Text.ParserCombinators.ReadPrec.ReadPrec a
                   = GHC.Read.readPrec @ a $dRead
                 } in
                 GHC.Read.$fReadDouble10
                   @ (Network.MateLight.Simple.Event a)
                   (\ (c :: Text.ParserCombinators.ReadPrec.Prec)
                      @ b
                      (eta1 :: Network.MateLight.Simple.Event a
                               -> Text.ParserCombinators.ReadP.P b) ->
                    case c of wild { GHC.Types.I# x ->
                    case GHC.Prim.tagToEnum#
                           @ GHC.Types.Bool
                           (GHC.Prim.<=# x 10#) of wild2 {
                      GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                      GHC.Types.True
                      -> let {
                           lvl80 :: Text.ParserCombinators.ReadP.P b
                           = let {
                               lvl81 :: Text.ParserCombinators.ReadP.P b
                               = GHC.Read.$woptional2
                                   @ b
                                   (\ (a1 :: GHC.Base.String) ->
                                    (ds `cast` (Text.ParserCombinators.ReadPrec.N:ReadPrec[0] <a>_R)
                                       Network.MateLight.Simple.$fReadEvent4)
                                      `cast`
                                    (Text.ParserCombinators.ReadP.N:ReadP[0] <a>_R)
                                      @ b
                                      (\ (a2 :: a) ->
                                       eta1 (Network.MateLight.Simple.Event @ a a1 a2)))
                             } in
                             Text.Read.Lex.expect2
                               @ b
                               (\ (a1 :: Text.Read.Lex.Lexeme) ->
                                case a1 of wild1 {
                                  DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b
                                  Text.Read.Lex.Ident a2
                                  -> case GHC.Base.eqString
                                            a2
                                            Network.MateLight.Simple.$fReadEvent3 of wild3 {
                                       GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b
                                       GHC.Types.True -> lvl81 } })
                         } in
                         let {
                           k :: () -> Text.ParserCombinators.ReadP.P b
                             {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                                Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl80) -}
                           = \ (w4 :: ()) -> lvl80
                         } in
                         Text.ParserCombinators.ReadP.Look
                           @ b
                           (\ (a1 :: GHC.Base.String) ->
                            (Text.ParserCombinators.ReadP.skipSpaces_skip a1)
                              `cast`
                            (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                              @ b
                              k) } })
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Network.MateLight.Simple.Event a>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Network.MateLight.Simple.Event a>_R)))
                   eta) -}
d75bdcef3efbb2a4b6a5a990c6e48ba8
  $fReadEvent3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Event"#) -}
51b9e7539283d2cd78e99a4de4926219
  $fReadEvent4 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent_$creadList ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadP.ReadS
      [Network.MateLight.Simple.Event a]
  {- Arity: 1, Strictness: <L,U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) ->
                 Text.ParserCombinators.ReadP.run
                   @ [Network.MateLight.Simple.Event a]
                   (GHC.Read.$wlist
                      @ (Network.MateLight.Simple.Event a)
                      (Network.MateLight.Simple.$fReadEvent2 @ a $dRead)
                        `cast`
                      (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                <Network.MateLight.Simple.Event a>_R))
                      @ [Network.MateLight.Simple.Event a]
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ [Network.MateLight.Simple.Event a]))) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent_$creadListPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      [Network.MateLight.Simple.Event a]
  {- Arity: 3, Strictness: <L,U(A,A,U,A)><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.Simple.$fReadEvent1
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Read.Read a>_R
                 ->_R Trans
                          (<Text.ParserCombinators.ReadPrec.Prec>_R
                           ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                         <[Network.MateLight.Simple.Event a]>_R))
                          (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                    <[Network.MateLight.Simple.Event a]>_R))) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent_$creadPrec ::
    GHC.Read.Read a =>
    Text.ParserCombinators.ReadPrec.ReadPrec
      (Network.MateLight.Simple.Event a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.Simple.$fReadEvent2
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Read.Read a>_R
                 ->_R Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <Network.MateLight.Simple.Event a>_R)) -}
83a493b1c87ba6f69392617b69d5250e
  $fReadEvent_$creadsPrec ::
    GHC.Read.Read a =>
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS
         (Network.MateLight.Simple.Event a)
  {- Arity: 2, Strictness: <L,1*U(A,A,1*U,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dRead :: GHC.Read.Read a) (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ (Network.MateLight.Simple.Event a)
                   ((Network.MateLight.Simple.$fReadEvent2 @ a $dRead eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <Network.MateLight.Simple.Event a>_R)
                      @ (Network.MateLight.Simple.Event a)
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ (Network.MateLight.Simple.Event a)))) -}
83a493b1c87ba6f69392617b69d5250e
  $fShowEvent ::
    GHC.Show.Show a => GHC.Show.Show (Network.MateLight.Simple.Event a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (Network.MateLight.Simple.Event a)
                  (Network.MateLight.Simple.$fShowEvent_$cshowsPrec @ a $dShow)
                  (Network.MateLight.Simple.$fShowEvent_$cshow @ a $dShow)
                  (Network.MateLight.Simple.$fShowEvent_$cshowList @ a $dShow) -}
a228a4909972cb40106a6c7e9e69308b
  $fShowEvent1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b292c056dcd4ceb79d07b6d479b5f7fa
  $fShowEvent2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Event "#) -}
83a493b1c87ba6f69392617b69d5250e
  $fShowEvent_$cshow ::
    GHC.Show.Show a =>
    Network.MateLight.Simple.Event a -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U(1*U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w4 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { Network.MateLight.Simple.Event ww1 ww2 ->
                 Network.MateLight.Simple.$w$cshow @ a w ww1 ww2 }) -}
83a493b1c87ba6f69392617b69d5250e
  $fShowEvent_$cshowList ::
    GHC.Show.Show a =>
    [Network.MateLight.Simple.Event a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [Network.MateLight.Simple.Event a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Network.MateLight.Simple.Event a)
                   (Network.MateLight.Simple.$fShowEvent_$cshowsPrec
                      @ a
                      $dShow
                      Network.MateLight.Simple.$fShowEvent1)
                   eta
                   eta1) -}
83a493b1c87ba6f69392617b69d5250e
  $fShowEvent_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> Network.MateLight.Simple.Event a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w4 :: GHC.Types.Int)
                   (w5 :: Network.MateLight.Simple.Event a) ->
                 case w4 of ww { GHC.Types.I# ww1 ->
                 case w5 of ww2 { Network.MateLight.Simple.Event ww3 ww4 ->
                 Network.MateLight.Simple.$w$cshowsPrec @ a w ww1 ww3 ww4 } }) -}
5dacbd12383ce6f0bc3e317fd4797245
  $tc'Event :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3778280566052707927##
                   4768359563752761167##
                   Network.MateLight.Simple.$trModule
                   Network.MateLight.Simple.$tc'Event1) -}
cb5d6c7f754ddc5b65ba89a3c1f4dbef
  $tc'Event1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Event"#) -}
356eeaace409106908ef981edf9c55a9
  $tcEvent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   191711680062383151##
                   10677669391388899621##
                   Network.MateLight.Simple.$trModule
                   Network.MateLight.Simple.$tcEvent1) -}
82df376b0ad9ad776a540abaedeef72a
  $tcEvent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Event"#) -}
f8fe2025cd3faf27df5a6efbc052b49a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Network.MateLight.Simple.$trModule2
                   Network.MateLight.Simple.$trModule1) -}
799d237d267d6caf75b3af70895a6e53
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Network.MateLight.Simple"#) -}
d8fd6e684c338113a1fa268510638ee1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "HSMateLight-0.1.0.0-Df1CB9554xjHvhQtZIZ9Dm"#) -}
578d68153e586492b87f88c641887a1c
  $w$c/= ::
    GHC.Classes.Eq a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.== @ a w ww1 ww3 of wild1 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } }) -}
c293e1e68597828f73ad010ed367d18e
  $w$c< ::
    GHC.Classes.Ord a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> GHC.Classes.< @ a w ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
62d1b44a58ed043d03b54cd479835eef
  $w$c<= ::
    GHC.Classes.Ord a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,1*C1(C1(U)),A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ -> GHC.Classes.<= @ a w ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
bb9ad86d80b7444f158b0822f96ab424
  $w$c== ::
    GHC.Classes.Eq a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.== @ a w ww1 ww3 }) -}
3f272cb43ec4280a671b0d5f73bdf67d
  $w$c> ::
    GHC.Classes.Ord a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,1*C1(C1(U)),A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ -> GHC.Classes.> @ a w ww1 ww3
                   GHC.Types.GT -> GHC.Types.True }) -}
8a198c0dc6264c7b8056981ac54142f0
  $w$c>= ::
    GHC.Classes.Ord a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,A,A,A,1*C1(C1(U)),A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ -> GHC.Classes.>= @ a w ww1 ww3
                   GHC.Types.GT -> GHC.Types.True }) -}
876569528d2e0f2f26976dcf61588427
  $w$ccompare ::
    GHC.Classes.Ord a =>
    GHC.Base.String -> a -> GHC.Base.String -> a -> GHC.Types.Ordering
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: a) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ -> GHC.Classes.compare @ a w ww1 ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
b446967b3d08670d0a9ed631e701c7d6
  $w$cshow ::
    GHC.Show.Show a => GHC.Base.String -> a -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Base.String)
                   (ww1 :: a) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   Network.MateLight.Simple.$fShowEvent2
                   (GHC.Types.:
                      @ GHC.Types.Char
                      GHC.Show.shows8
                      (GHC.Show.showLitString
                         ww
                         (GHC.Types.:
                            @ GHC.Types.Char
                            GHC.Show.shows8
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showsPrec
                                  @ a
                                  w
                                  Network.MateLight.Simple.$fReadEvent4
                                  ww1
                                  (GHC.Types.[] @ GHC.Types.Char))))))) -}
6be0e3818304e9868f9f597bccddd090
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> GHC.Base.String -> a -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Network.MateLight.Simple.$fReadEvent4
                       ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Network.MateLight.Simple.$fShowEvent2
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.shows8
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.shows8
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows9
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows6 x)) }) -}
83a493b1c87ba6f69392617b69d5250e
  data Event a = Event GHC.Base.String a
36e764240fcdbadad93dff7989b864dc
  runMate ::
    Network.MateLight.Frame f =>
    Network.MateLight.Config
    -> ([Network.MateLight.Simple.Event GHC.Base.String]
        -> s -> (f, s))
    -> s
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(C(U),A)><L,1*U(1*U,U,1*U(1*U(U),1*U(U)),1*U,U,1*U)><L,C(C1(U(U,U)))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.Simple.runMate1
                  `cast`
                (forall (f :: <*>_N) (s :: <*>_N).
                 <Network.MateLight.Frame f>_R
                 ->_R <Network.MateLight.Config>_R
                 ->_R <[Network.MateLight.Simple.Event GHC.Base.String]
                       -> s -> (f, s)>_R
                 ->_R <s>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b4f0e061fb0868ad4fd424595e044c78
  runMate1 ::
    Network.MateLight.Frame f =>
    Network.MateLight.Config
    -> ([Network.MateLight.Simple.Event GHC.Base.String]
        -> s -> (f, s))
    -> s
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(C(U),A)><L,1*U(1*U,U,1*U(1*U(U),1*U(U)),1*U,U,1*U)><L,C(C1(U(U,U)))><L,U><S,U>,
     Unfolding: (\ @ f
                   @ s
                   ($dFrame :: Network.MateLight.Frame f)
                   (conf :: Network.MateLight.Config)
                   (fkt :: [Network.MateLight.Simple.Event GHC.Base.String]
                           -> s -> (f, s))
                   (eta :: s)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Network.MateLight.runMateM1
                   @ f
                   @ s
                   $dFrame
                   conf
                   (\ (x :: [Network.MateLight.EventT])
                      (eta2 :: s)[OneShot]
                      (eta3 :: f)[OneShot]
                      (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    (# eta4,
                       fkt
                         (GHC.Base.map
                            @ Network.MateLight.EventT
                            @ (Network.MateLight.Simple.Event GHC.Base.String)
                            Network.MateLight.Simple.stringEvent
                            x)
                         eta2 #))
                     `cast`
                   (<[Network.MateLight.EventT]>_R
                    ->_R Trans
                             (<s>_R
                              ->_R Trans
                                       (<f>_R ->_R Sym (GHC.Types.N:IO[0] <(f, s)>_R))
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N <f>_R <GHC.Types.IO>_R <(f, s)>_N)))
                             (Trans
                                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <s>_N
                                            <Control.Monad.Trans.Reader.ReaderT f GHC.Types.IO>_R
                                            <f>_N))
                                  (Sym (Network.MateLight.N:MateMonad[0]
                                            <f>_R <s>_N <GHC.Types.IO>_R) <f>_N)))
                   eta
                   eta1) -}
f9d82f0a2a6caa2126c196940a29339c
  runMateRandom ::
    Network.MateLight.Frame f =>
    Network.MateLight.Config
    -> ([GHC.Types.Int]
        -> [Network.MateLight.Simple.Event GHC.Base.String] -> s -> (f, s))
    -> s
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <L,U(C(U),A)><L,1*U(1*U,U,1*U(1*U(U),1*U(U)),1*U,U,1*U)><L,C(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Network.MateLight.Simple.runMateRandom1
                  `cast`
                (forall (f :: <*>_N) (s :: <*>_N).
                 <Network.MateLight.Frame f>_R
                 ->_R <Network.MateLight.Config>_R
                 ->_R <[GHC.Types.Int]
                       -> [Network.MateLight.Simple.Event GHC.Base.String]
                       -> s
                       -> (f, s)>_R
                 ->_R <s>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b8cf81e5829a0559130b787e1bb247d8
  runMateRandom1 ::
    Network.MateLight.Frame f =>
    Network.MateLight.Config
    -> ([GHC.Types.Int]
        -> [Network.MateLight.Simple.Event GHC.Base.String] -> s -> (f, s))
    -> s
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <L,U(C(U),A)><L,1*U(1*U,U,1*U(1*U(U),1*U(U)),1*U,U,1*U)><L,C(C1(C1(U(U,U))))><L,U><S,U>,
     Unfolding: (\ @ f
                   @ s
                   ($dFrame :: Network.MateLight.Frame f)
                   (conf :: Network.MateLight.Config)
                   (fkt :: [GHC.Types.Int]
                           -> [Network.MateLight.Simple.Event GHC.Base.String] -> s -> (f, s))
                   (eta :: s)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Network.MateLight.runMateM1
                   @ f
                   @ s
                   $dFrame
                   conf
                   (\ (evs :: [Network.MateLight.EventT])
                      (s1 :: s)[OneShot]
                      (eta2 :: f)[OneShot]
                      (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case System.Random.theStdGen
                           `cast`
                         (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                    case GHC.Prim.atomicModifyMutVar#
                           @ GHC.Prim.RealWorld
                           @ System.Random.StdGen
                           @ (System.Random.StdGen, System.Random.StdGen)
                           @ System.Random.StdGen
                           r#
                           System.Random.newStdGen2
                           eta3 of ds1 { (#,#) ipv ipv1 ->
                    case ipv1 of b1 { System.Random.StdGen ipv2 ipv3 ->
                    (# ipv,
                       fkt
                         (Network.MateLight.Simple.runMateRandom_go b1)
                         (GHC.Base.map
                            @ Network.MateLight.EventT
                            @ (Network.MateLight.Simple.Event GHC.Base.String)
                            Network.MateLight.Simple.stringEvent
                            evs)
                         s1 #) } } })
                     `cast`
                   (<[Network.MateLight.EventT]>_R
                    ->_R Trans
                             (<s>_R
                              ->_R Trans
                                       (<f>_R ->_R Sym (GHC.Types.N:IO[0] <(f, s)>_R))
                                       (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                 <*>_N <f>_R <GHC.Types.IO>_R <(f, s)>_N)))
                             (Trans
                                  (Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                            <s>_N
                                            <Control.Monad.Trans.Reader.ReaderT f GHC.Types.IO>_R
                                            <f>_N))
                                  (Sym (Network.MateLight.N:MateMonad[0]
                                            <f>_R <s>_N <GHC.Types.IO>_R) <f>_N)))
                   eta
                   eta1) -}
720e35649c3e37931d803e0f6aafb8d2
  runMateRandom_go :: System.Random.StdGen -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <L,U> -}
ea460818fd5b09be360ae79ea014b8cd
  stringEvent ::
    Network.MateLight.EventT
    -> Network.MateLight.Simple.Event GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Network.MateLight.EventT) ->
                 case ds of wild { Network.MateLight.EventT a $dTypeable $dShow mod a1 ->
                 Network.MateLight.Simple.Event
                   @ GHC.Base.String
                   mod
                   (GHC.Show.show @ a $dShow a1) }) -}
instance GHC.Classes.Eq [Network.MateLight.Simple.Event]
  = Network.MateLight.Simple.$fEqEvent
instance GHC.Classes.Ord [Network.MateLight.Simple.Event]
  = Network.MateLight.Simple.$fOrdEvent
instance GHC.Read.Read [Network.MateLight.Simple.Event]
  = Network.MateLight.Simple.$fReadEvent
instance GHC.Show.Show [Network.MateLight.Simple.Event]
  = Network.MateLight.Simple.$fShowEvent
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

